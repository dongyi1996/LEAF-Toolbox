/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-81.84062500000002, 44.26463363444282],
          [-81.84062500000002, 42.7991879605782],
          [-79.02812500000002, 42.7991879605782],
          [-79.02812500000002, 44.26463363444282]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Code by Lixun Sun, 2020 to produce mosaic for S2 MSI data

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Description: This function creates a mosaic for biophysical parameter extraction.
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  // Description: This function creates a score map for a given image based two spectral bands (NIR and
  //              blue) and image acquisition time.
  //
  // Note:        (1) This function assumes that the pixel values are in 0-10000 eflectance 
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////
  var add_spec_score = function (centre_eeDate,image) 
  {
    
    //print('in spec score')
    var centre_eeDate = ee.Date(centre_eeDate);
    var image = ee.Image(image);
    //print(centre_eeDate);
    //print(image);
    
      var eoImg    = require('users/ORS_code/eoModules:eoImage');
  var eoImgSet = require('users/ORS_code/eoModules:eoImgSet');
  var eoWTMap  = require('users/ORS_code/eoModules:eoWaterDetector');
  var eoTileGD = require('users/ORS_code/eoModules:eoTileGrids');
  var eoMosaic = require('users/ORS_code/eoModules:eoMosaicFuncs');


    //===============================================================================================
    // Obtain some meta data (e.g., sensor type, rescaling factor and original names of SIX critical
    // bands) about the given image.
    //===============================================================================================
    var sensor_code = eoImg.SensorCode(image);
    var rescale_f   = eoImg.get_rescale(image).multiply(0.01);
    var raw_6bands  = eoImg.get_raw_6BandNames(image);
    //print(sensor_code);
    //print(rescale_f);
    //print(raw_6bands);
    
    
    //===============================================================================================
    // Create a new image cube that only includes SIX critical bands, meanwhile rename and rescale 
    // the band images
    //===============================================================================================
    var rescale_img = ee.Image(ee.Number(rescale_f));  //Create a rescaling image
    
    //Create a new image cube that only contains SIX critical bands with standard names  
    var STD_img = image.select(raw_6bands, eoImg.SIX_STD_NAMES).toFloat();
    
    var blu_img = STD_img.select('blue').multiply(rescale_img);
    var grn_img = STD_img.select('green').multiply(rescale_img);
    var red_img = STD_img.select('red').multiply(rescale_img);
    var nir_img = STD_img.select('nir').multiply(rescale_img);
    var sw1_img = STD_img.select('swir1').multiply(rescale_img);
    var sw2_img = STD_img.select('swir2').multiply(rescale_img);
  
    //===============================================================================================
    // Modify blue band values if the image data is surface reflectance
    //===============================================================================================
    var data_unit    = eoImg.DataUnit(image);      //Determine data unit (surface or TOA reflectance)
    var modified_blu = blu_img.add(ee.Image(0.05));
    blu_img          = blu_img.where(ee.Number(data_unit).gt(ee.Number(1)), modified_blu);
   
    //===============================================================================================
    // Calculate spectral scores using only NIR and blue bands
    // Note: various tests have been done, the following ideas does not work:
    //       (1) SWIR1 and SWIR2 bands cannot be used, since the pixel values in these two bands 
    //           could be very high, especially for SENTINEL-2 data;
    //       (2) (NIR - blue)/(NIR + blue);
    //===============================================================================================
    var land_score  = nir_img.divide(blu_img);
   
    //===============================================================================================
    // Deal with water pixels
    //===============================================================================================
    var NDWI_map    = grn_img.subtract(sw1_img).divide(grn_img.add(sw1_img)); 
    var water_cond  = eoWTMap.GL_water.neq(ee.Image(1)).and(NDWI_map.gt(ee.Image(0.6)).and(nir_img.lt(ee.Image(0.03))));
    
    var water_score = blu_img.divide(nir_img.add(sw1_img).add(sw2_img));  // Blue/(NIR+SW1+SW2)
    var score_map   = land_score.where(water_cond, water_score);  //handle water pixels
  
    //===============================================================================================
    // For the pixels with bigger (1.5) spectral scores (normally are vegetated targets),
    // apply/add time scores as well
    //===============================================================================================
    var img_date    = ee.Date(image.date()).millis().divide(86400000);
    var refer_date  = ee.Date(centre_eeDate).millis().divide(86400000);  
    var date_delta  = img_date.subtract(refer_date).abs();
    
    var factor      = ee.Algorithms.If(sensor_code.gt(100), ee.Image(100), ee.Image(300));
    var time_score  = (ee.Image(date_delta).multiply(ee.Image(-1.0)).divide(factor)).exp();
  
    score_map       = land_score.where(land_score.gt(ee.Image(1.5)), land_score.add(time_score));
  
    //===============================================================================================
    // For all pixels, apply/add blue penalty
    //===============================================================================================
    var blue_score  = ee.Image(0.1).divide(blu_img); 
    score_map       = land_score.add(blue_score);
  
    //===============================================================================================
    // Deal with the bad pixels with invalid values
    //===============================================================================================
    var min_img = ee.Image(0.001);
    var max_ref = ee.Image(1.1);
    
    var all_positive = blu_img.lt(min_img).or(grn_img.lt(min_img)).or(red_img.lt(min_img))
                   .or(nir_img.lt(min_img)).or(sw1_img.lt(min_img)).or(sw2_img.lt(min_img));
                        
    var all_valid    = blu_img.gt(max_ref).or(grn_img.gt(max_ref)).or(red_img.gt(max_ref))
                   .or(nir_img.gt(max_ref)).or(sw1_img.gt(max_ref)).or(sw2_img.gt(max_ref));
                  
    score_map        = score_map.where(all_valid.or(all_positive), ee.Image(-100.0)).toFloat();
    
    //===============================================================================================
    // Smooth score map 
    //===============================================================================================
    var boxcar   = ee.Kernel.circle({radius: 2, units: 'pixels', normalize: true});
    var smoothed = score_map.convolve(boxcar);
    //print(image.addBands(smoothed.select([0], ['spec_score'])))
    
    //print('done spec score')
    return image.addBands(smoothed.select([0], ['spec_score']));
  };


exports.addSpecScore = add_SpecScore;
