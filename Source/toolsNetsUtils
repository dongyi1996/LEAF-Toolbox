// Read coefficients of a network from csv EE asset



// Parse one row of CSV file for a network into a global variable
//
// We assume a two hidden layer network with tansig functions but
// allow for variable nodes per layer/
//
// Should be deprecated to parsing tensor flow records
var makeNets = function(feature, M) {
  var feature = ee.List(feature);
  var M = ee.Number(M);
  var getCoefs = function(netData,ind) { 
  return((ee.Feature(netData)).getNumber(ee.String('tabledata').cat(ee.Number(ind).int())));
};
  // get the requested network and initialize the created network
  var netData = ee.Feature(feature.get(M.subtract(1)));
  var net = {};

  // input slope
  var num = ee.Number(6);
  var start = num.add(1);
  var end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.inpSlope = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  // input offset
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.inpOffset = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  // hidden layer 1 weight
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.h1wt = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  // hidden layer 1 bias
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.h1bi = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  // hidden layer 2 weight
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.h2wt = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));
  
  // hidden layer 2 bias
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.h2bi = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  // output slope
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.outSlope = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));
  
  // output offset
  num = end.add(1);
  start = num.add(1);
  end = num.add(netData.getNumber(ee.String('tabledata').cat(ee.String(num))));
  net.outBias = ee.List.sequence(start,end).map(getCoefs.bind(null,netData));

  return(ee.Dictionary(net));
};

exports.makeNets = makeNets;
